<script type="text/javascript">

var access_token = "";

function init_access_token() {
    if (access_token == "") {
        var oauthProvider = 'github';
        OAuth.popup(oauthProvider, function (err, suc) {
            if (suc) {
                access_token = suc.access_token;
                //store this

                var url = '{{ path("AceUserBundle_set_access_token") }}?access_token=' + access_token;
                $.get(url, {}, function (data) {
                    //alert("saved return value = " + data);
                });
            }
            else {
                access_token = "";
            }
        });
    }
}


function createNewFile() {

}

function renameFilenameModal(filename) {
    $("#oldFilename").val(filename);
    $("#newFilename").val(filename);
    $("#filenameModal").modal('show');
}

function renameFilename() {
    $.post("{{ path('AceUtilitiesBundle_renamefile', {'id':project_id} ) }}", {oldFilename: $("#oldFilename").val(), newFilename: $("#newFilename").val()}, function (data) {
        $("#filenameModal").modal('hide');
        handleResponse(data);
    });
}

function handleResponse(response) {
    var response = JSON.parse(response);
    if (response["success"])
        if(response["redirect_to"] !=null){
            var redirect_to = '{{ path('AceGenericBundle_edit', { 'project_id': 'replacepid', 'fpath': 'replacefpath' }) }}';
            redirect_to = redirect_to.replace(/replacepid/g, response["project_id"]);
            redirect_to = redirect_to.replace(/replacefpath/g, response["fpath"]);
            location.href = redirect_to;
        }else
            location.reload();
    else {
        setOperationOutput(response["error"], true);
        $(".modal").modal('hide');
    }
}

function setOperationProgress(newprogress) {
    $("#progress").show('fast');
    $("#progress_val").width(newprogress + '%');
    $("#operation_output").hide('fast');
    // $("#progress").show('fast');
    // if(newprogress < 10)
    // 	window.currentProgress = 0.5*newprogress;
    // else
    // 	window.currentProgress = 0;
    // $("#progress_val").width(window.currentProgress+'%');
    //
    // window.maxProgress = newprogress;
    // window.interval = setInterval(function()
    // {
    // 	$("#progress_val").width(window.currentProgress+'%');
    // 	if(window.currentProgress < window.maxProgress)
    // 		window.currentProgress++;
    // },10);
    // $("#operation_output").hide('fast');
}

function setOperationOutput(output) {
    $("#progress").hide('fast');
    $("#progress_val").width('0%');
    $("#operation_output").html(output).show('fast');
    //clear the interval here
}

function setOperationOutput(output, error) {
    $("#progress").hide('fast');
    $("#progress_val").width('0%');
    if (error) {
        output = "<span style='color: red'>" + output + "</span>";
    }
    $("#operation_output").html(output).show('fast');
    //clear the interval here
}

function save() {
    loadCode();
    setOperationProgress(90);
    {% if is_wiselib_clone is defined and is_wiselib_clone %}
    $.post("{{ path('AceUtilitiesBundle_savecode', {'id': fpath}) }}", {data: JSON.stringify(window.files), project_id: {{ project_id }} }, function (data) {
        $("#save").addClass("btn-success");
        $("#save_icon").addClass("icon-white");
        data = JSON.parse(data);
        setOperationOutput(data['message']);
        window.setTimeout(function () {
            $("#save").removeClass("btn-success");
            $("#save_icon").removeClass("icon-white");
        }, 500);
    });
    {% else %}
    var nurl = '{{ path('AceUtilitiesBundle_savecode', {'id': 'replaceme'}) }}';
    nurl = nurl.replace('replaceme', window.selectedFile);
    $.post(nurl, {data: JSON.stringify(window.files), project_id: {{ project_id }} }, function (data) {
        $("#save").addClass("btn-success");
        $("#save_icon").addClass("icon-white");
        data = JSON.parse(data);
        setOperationOutput(data['message']);
        window.setTimeout(function () {
            $("#save").removeClass("btn-success");
            $("#save_icon").removeClass("icon-white");
        }, 500);
    });
    {% endif %}
}

function save_selected_file(selected_file, files) {
    var nurl = '{{ path('AceUtilitiesBundle_savecode', {'id': 'replaceme'}) }}';
    nurl = nurl.replace('replaceme', selected_file);
    $.post(nurl, {data: JSON.stringify(files), project_id: {{ project_id }} }, function (data) {
        $("#save").addClass("btn-success");
        $("#save_icon").addClass("icon-white");
        data = JSON.parse(data);
        setOperationOutput(data['message']);
        window.setTimeout(function () {
            $("#save").removeClass("btn-success");
            $("#save_icon").removeClass("icon-white");
        }, 500);
    });
}
/*
 function save() {
 loadCode();
 setOperationProgress(90);
 $.post("{{ path('AceUtilitiesBundle_savecode', {'id': fpath}) }}", {data: JSON.stringify(window.files), project_id: {{ project_id }} }, function (data) {
 $("#save").addClass("btn-success");
 $("#save_icon").addClass("icon-white");
 data = JSON.parse(data);
 setOperationOutput(data['message']);
 window.setTimeout(function () {
 $("#save").removeClass("btn-success");
 $("#save_icon").removeClass("icon-white");
 }, 500);
 //   alert("Data received: " +JSON.stringify(data, null, 4));
 });
 }:*/

function save_to_github(repo_name) {
    $("#repoName").val(repo_name);
    var fnames_str = "";
    for (var k in window.files) {
        if (window.files.hasOwnProperty(k)) {
            fnames_str += "<li>" + k + "</li>";
        }
    }

    var oauthProvider = 'github';
    var user_name = '';
    var token = '';
    // get the user's username :user
    init_access_token();

    OAuth.popup(oauthProvider, function (err, suc) {
        if (suc) {
            $.ajax
            ({
                async: false,
                type: "GET",
                url: 'https://api.github.com/user?access_token=' + suc.access_token,
                dataType: 'json',
                success: function (data) {
                    var json = $.parseJSON(JSON.stringify(data, undefined, 2));
                    user_name = json.login;
                    // doing with the syncronization of the project
                    compare_files(user_name, repo_name, suc.access_token);
                }
            });
        }
    });


    //$("#m_files").html(fnames_str);
    //$("#commitModal").modal('show');
}

function show_git_pull_warning() {

    var oauthProvider = 'github';
    var user_name = '';
    var token = '';
    // get the user's username :user
    init_access_token();

    OAuth.popup(oauthProvider, function (err, suc) {
        if (suc) {
            $.ajax
            ({
                async: false,
                type: "GET",
                url: 'https://api.github.com/user?access_token=' + suc.access_token,
                dataType: 'json',
                success: function (data) {
                    var json = $.parseJSON(JSON.stringify(data, undefined, 2));
                    user_name = json.login;
                    // doing with the syncronization of the project
                    var repo_name = $('#repoName_pull').val();
                    compare_files_pull(user_name, repo_name, suc.access_token);
                }
            });
        }
    });

    //compare_files_pull(user_name, repo_name, token);
    //$("#gitPullWarningModal").modal('show');
}

function confirm_delete_from_github(repo_name) {
    $("#deleteProjectGitButton").attr("href", "javascript:delete_from_github('" + repo_name + "');");
    $("#deleteProjectGitModal").modal("show");
}

function delete_from_github(repo_name) {
    var oauthProvider = 'github';
    var user_name = '';
    var token = '';
    // get the user's username :user
    init_access_token();

    $("#deleteProjectGitButton").addClass("disabled");
    $("#deleteProjectGitButtonC").addClass("disabled");
    $("#deleteProjectGitButton").html("<i class='icon-spinner icon-spin icon-large'></i> Deleting ...");

    OAuth.popup(oauthProvider, function (err, suc) {
        if (suc) {
            $.ajax
            ({
                type: "GET",
                url: 'https://api.github.com/user?access_token=' + suc.access_token,
                dataType: 'json',
                success: function (data) {
                    var json = $.parseJSON(JSON.stringify(data, undefined, 2));
                    user_name = json.login;
                    $.ajax
                    ({
                        type: "DELETE",
                        url: 'https://api.github.com/repos/' + user_name + '/' + repo_name + '?access_token=' + suc.access_token,
                        dataType: 'json',
                        success: function () {
                            alert("Repository '" + repo_name + "' deleted on GitHub.com!");
                            $.post("{{ path('AceUtilitiesBundle_setprojectgiturl', {'id':project_id} ) }}", {data: ""}, function (data) {
                                $("#div_git_url").html("");
                                $("#div_delete_from_github").html("");
                                $("#div_pull_from_github").html("");
                                $("#div_git_url").css('display', 'none');
                            });

                            $.post("{{ path('AceUtilitiesBundle_setprojectgitcommitsha', {'id':project_id} ) }}", {data: ""}, function (data) {
                            });
                        },
                        error: function (request, status, error) {
                            alert("ERROR: " + request.responseText);
                        }
                    });

                },
                error: function (req, status, er) {
                    alert("ERROR: " + req.responseText);
                }
            });
            //$('#result').html("// Result success <br /><br />" + JSON.stringify(suc, undefined, 2));
        }
        else {
            // $('#result').html("// Result error <br /><br />" + err);
        }
    });
    $("#deleteProjectGitModal").modal("hide");
    $("#deleteProjectGitButton").removeClass("disabled");
    $("#deleteProjectGitButtonC").removeClass("disabled");
    $("#deleteProjectGitButton").html("<i class='icon-trash icon-white'> Delete!");

}

function pull_from_github(repo_name, git_commit_sha) {
    $("#gitPullWarningButton").addClass("disabled");
    $("#gitPullWarningButtonC").addClass("disabled");
    $("#gitPullWarningButton").html("<i class='icon-spinner icon-spin icon-large'></i> Pulling ...");


    var oauthProvider = 'github';
    var user_name = '';
    init_access_token();
    OAuth.popup(oauthProvider, function (error, success) {
        if (success) {

            // GET  /user
            // Get the authenticated user
            $.ajax
            ({
                type: "GET",
                url: 'https://api.github.com/user?access_token=' + success.access_token,
                dataType: 'json',
                async: false,
                data: '',
                success: function (data) {
                    var json = $.parseJSON(JSON.stringify(data, undefined, 2));
                    user_name = json.login;
                    token = success.access_token;
                },
                error: function (request, status, error) {
                    alert("ERROR: " + request.responseText);
                    return;
                }
            });

            //GET /repos/:user/:repo/git/refs/heads/master
            //Store the SHA for the latest commit (SHA-LATEST-COMMIT)
            var old_commit_sha = '';
            $.ajax
            ({
                cache: false,
                type: "GET",
                url: 'https://api.github.com/repos/' + user_name + '/' + repo_name + '/git/refs/heads/master?access_token=' + success.access_token,
                dataType: 'json',
                data: '',
                async: false,
                success: function (data) {
                    console.log('sha in db=' + git_commit_sha);
                    console.log('https://api.github.com/repos/' + user_name + '/' + repo_name + '/git/refs/heads/master?access_token=' + success.access_token);
                    var json = $.parseJSON(JSON.stringify(data, undefined, 2));
                    old_commit_sha = json.object.sha;
                    console.log('sha in github=' + old_commit_sha);
//                    if (old_commit_sha.trim().toLowerCase() == git_commit_sha) {
//                        alert("Nothing to pull from the branch - master!")
//                    } else
                    {
                        // http://developer.github.com/v3/repos/contents/#get-contents
                        // GET /repos/:owner/:repo/contents/:path
                        // get contents of the _app.cpp file from the master branch

                        $.ajax
                        ({
                            cache: false,
                            type: "GET",
                            url: 'https://api.github.com/repos/' + user_name + '/' + repo_name + '/contents/?access_token=' + success.access_token,
                            dataType: 'json',
                            data: '',
                            async: false,
                            success: function (data) {
                                var json_resp = $.parseJSON(JSON.stringify(data, undefined, 2));
                                //alert(JSON.stringify(json_resp));
                                for (var key in json_resp) {
                                    if (json_resp.hasOwnProperty(key)) {
                                        var content = json_resp[key];
                                        if (content.type == "file") {
                                            //save the file
                                            if (!(content.name in window.files)) {
                                                createWiselibFileIDFL({{ project_id }}, content.name);
                                                //content.path;
                                            } else {
                                                // there is the same file on GitHub and Wisebender but probably with differences. Ask user to keep which version of the file.
                                            }

                                            $.ajax
                                            ({
                                                type: "GET",
                                                url: 'https://api.github.com/repos/' + user_name + '/' + repo_name + '/contents/' + content.path + '?access_token=' + success.access_token,
                                                dataType: 'json',
                                                data: '',
                                                async: false,
                                                success: function (datum) {
                                                    var json_file = $.parseJSON(JSON.stringify(datum, undefined, 2));
                                                    var file_contents = json_file.content;
                                                    file_contents = $.base64Decode(file_contents);
                                                    window.files[content.path] = file_contents;
                                                    save_selected_file(content.name, window.files);
                                                },
                                                error: function (request, status, error) {
                                                    alert("ERROR: " + request.responseText);
                                                    return;
                                                }
                                            });
                                        }
                                    }
                                }

                                editor.getSession().setValue($("<div/>").html(window.files[repo_name + "_app.cpp"]).text().replace(/&quot;/g, "\""));
                            },
                            error: function (request, status, error) {
                                alert("ERROR: " + request.responseText);
                                return;
                            }
                        });
                    }
                },
                error: function (request, status, error) {
                    var json_r = $.parseJSON(request.responseText);
                    if (json_r.message.toLowerCase() == "git repository is empty.") {
                        //src_commit(user_name, repo_name, success.access_token);
                        // TODO find a solution for this case!
                    } else if (json_r.message.toLowerCase().trim() == "not found") {
                        // the repo doesn't exist
                        alert("The repo " + repo_name + " does not exist");
                    } else {
                        alert("ERROR: " + request.responseText);
                    }
                }
            });
        }
        else {
            alert("// Result error <br /><br />" + error);
        }
    })
    ;


    $("#gitPullWarningButton").removeClass("disabled");
    $("#gitPullWarningButtonC").removeClass("disabled");
    $("#gitPullWarningButton").html("<i class='icon-cloud-download icon-white'></i> Pull!");
    $("#gitPullWarningModal").modal('hide');

    // delete file or add new file needs a page refresh!!!
    var reload = false;
    for (var key in comp_files_pull) {
        switch (comp_files_pull[key]) {
            case "D":
                deleteFile(key);
            case "N":
                reload = true;
                break;
            case "S":

                break;
            case "M":

                break;
        }
    }
    if (reload) {
        location.reload();
    } else {
        editor.getSession().setValue($("<div/>").html(window.files[repo_name + "_app.cpp"]).text().replace(/&quot;/g, "\""));
    }
}


/*
 $.post('https://api.github.com/repos/' + user_name + '/' + repo_name + '/git/blobs?access_token=' + token, JSON.stringify(json_data),function (data_blob) {
 }).fail(function () {
 alert("error");
 })
 .success(function (data_blob) {
 var json_blob = $.parseJSON(JSON.stringify(data_blob, undefined, 2));
 sha_blob[index++] = json_blob.sha;
 console.log("sha is " + json_blob.sha);
 })
 */
//            alert("sending request " +             "$.ajax   ({type: \"POST\",  url: 'https://api.github.com/repos/" + user_name + "/" + repo_name + "/git/blobs?access_token='" + token + ",  dataType: 'json',                async: false, data: " + JSON.stringify(json_data) + ",   success: function (data_blob) { var json_blob =  + $.parseJSON(JSON.stringify(data_blob, undefined, 2)); " +
//                  sha_blob[index] + " = json_blob.sha; },     error: function (request, status, error) {  alert(\"ERROR: \" + request.responseText);  return;  } });");

var comp_files, shas;
var comp_files_pull, shas_pull;
function compare_files(user_name, repo_name, token) {
    var comp = new Array();
    shas = new Array();
    $.ajax
    ({
        cache: false,
        type: "GET",
        url: 'https://api.github.com/repos/' + user_name + '/' + repo_name + '/contents/?access_token=' + token,
        dataType: 'json',
        data: '',
        async: false,
        success: function (data) {
            var json_resp = $.parseJSON(JSON.stringify(data, undefined, 2));
            var key;
            for (key in json_resp) {
                if (json_resp[key].name.match(/.cpp|.h$/) != null) {
                    if (json_resp.hasOwnProperty(key)) {
                        var content = json_resp[key];
                        if (content.type == "file") {
                            //check the contents of the files
                            if (!(content.name in window.files)) {
                                //files deleted
                                comp[content.name] = "D";
                                shas[content.name] = json_resp[key].sha;
                            } else {
                                // check if updated
                                $.ajax
                                ({
                                    cache: false,
                                    type: "GET",
                                    url: 'https://api.github.com/repos/' + user_name + '/' + repo_name + '/contents/' + content.path + '?access_token=' + token,
                                    dataType: 'json',
                                    data: '',
                                    async: false,
                                    success: function (datum) {
                                        var json_file = $.parseJSON(JSON.stringify(datum, undefined, 2));
                                        var file_contents = json_file.content;
                                        shas[content.name] = json_file.sha;
                                        var current_file = window.files[content.path];
                                        current_file = current_file.replace(/&quot;/g, "\"");
                                        current_file = current_file.replace(/&amp;/g, "&");
                                        current_file = current_file.replace(/&gt;/g, ">");
                                        current_file = current_file.replace(/&lt;/g, "<");
                                        file_contents = $.base64Decode(file_contents);

                                        if (file_contents == current_file) {
                                            //alert(content.path + " - file same.");
                                            comp[content.name] = "S"
                                        } else {
                                            //alert(file_contents);
                                            //alert(current_file);
                                            //alert("file updated");
                                            comp[content.name] = "M";
                                        }
                                    },
                                    error: function (request, status, error) {
                                        alert("ERROR: " + request.responseText);
                                        return;
                                    }
                                });
                            }
                        }
                    }
                }
            }
        },
        error: function (request, status, error) {
            //alert("ERROR: " + request.responseText);
            //return;
        }
    });
    for (var key in window.files) {
        if (!(key in comp) && key.match(/.cpp|.h$/) != null) {
            comp[key] = "N";
        }
    }

    var strN = "<h5>New Files:</h5><ul>";
    var strD = "<h5>Deleted Files:</h5><ul>";
    var strS = "<h5>Unmodified Files:</h5><ul>";
    var strM = "<h5>Modified Files:</h5><ul>";
    for (var key in comp) {
        switch (comp[key]) {
            case "N":
                strN += "<li>" + key + "</li>";
                break;
            case "D":
                strD += "<li>" + key + "</li>";
                break;
            case "S":
                strS += "<li>" + key + "</li>";
                break;
            case "M":
                strM += "<li>" + key + "</li>";
                break;
        }
    }
    comp_files = comp;
    if (strN.trim() == "<h5>New Files:</h5><ul>" && strD.trim() == "<h5>Deleted Files:</h5><ul>" && strM.trim() == "<h5>Modified Files:</h5><ul>")
        $('#noChangeModal').modal('show');
    else {
        $('#commitValidateBody').html(strN.concat("</ul>").concat(strD).concat("</ul>").concat(strS).concat("</ul>").concat(strM).concat("</ul>"));
        $('#commitValidateModal').modal('show');
    }
}


function compare_files_pull(user_name, repo_name, token) {
    var comp = new Array();
    shas_pull = new Array();
    $.ajax
    ({
        cache: false,
        type: "GET",
        url: 'https://api.github.com/repos/' + user_name + '/' + repo_name + '/contents/?access_token=' + token,
        dataType: 'json',
        data: '',
        async: false,
        success: function (data) {
            var json_resp = $.parseJSON(JSON.stringify(data, undefined, 2));
            var key;
            for (key in json_resp) {
                if (json_resp[key].name.match(/.cpp|.h$/) != null) {
                    if (json_resp.hasOwnProperty(key)) {
                        var content = json_resp[key];
                        if (content.type == "file") {
                            //check the contents of the files
                            if (!(content.name in window.files)) {
                                //files deleted
                                comp[content.name] = "N";
                                shas_pull[content.name] = json_resp[key].sha;
                            } else {
                                // check if updated
                                $.ajax
                                ({
                                    cache: false,
                                    type: "GET",
                                    url: 'https://api.github.com/repos/' + user_name + '/' + repo_name + '/contents/' + content.path + '?access_token=' + token,
                                    dataType: 'json',
                                    data: '',
                                    async: false,
                                    success: function (datum) {
                                        var json_file = $.parseJSON(JSON.stringify(datum, undefined, 2));
                                        var file_contents = json_file.content;
                                        shas_pull[content.name] = json_file.sha;
                                        var current_file = window.files[content.path];
                                        current_file = current_file.replace(/&quot;/g, "\"");
                                        current_file = current_file.replace(/&amp;/g, "&");
                                        current_file = current_file.replace(/&gt;/g, ">");
                                        current_file = current_file.replace(/&lt;/g, "<");
                                        file_contents = $.base64Decode(file_contents);

                                        if (file_contents == current_file) {
                                            comp[content.name] = "S"
                                        } else {
                                            comp[content.name] = "M";
                                        }
                                    },
                                    error: function (request, status, error) {
                                        alert("ERROR: " + request.responseText);
                                        return;
                                    }
                                });
                            }
                        }
                    }
                }
            }
        },
        error: function (request, status, error) {
            alert("ERROR: " + request.responseText);
            return;
        }
    });
    for (var key in window.files) {
        if (!(key in comp) && key.match(/.cpp|.h$/) != null) {
            comp[key] = "D";
        }
    }

    var strN = "<h5>New Files:</h5><ul>";
    var strD = "<h5>Deleted Files:</h5><ul>";
    var strS = "<h5>Unmodified Files:</h5><ul>";
    var strM = "<h5>Modified Files:</h5><ul>";
    for (var key in comp) {
        switch (comp[key]) {
            case "N":
                strN += "<li>" + key + "</li>";
                break;
            case "D":
                strD += "<li>" + key + "</li>";
                break;
            case "S":
                strS += "<li>" + key + "</li>";
                break;
            case "M":
                strM += "<li>" + key + "</li>";
                break;
        }
    }
    comp_files_pull = comp;
    if (strN.trim() == "<h5>New Files:</h5><ul>" && strD.trim() == "<h5>Deleted Files:</h5><ul>" && strM.trim() == "<h5>Modified Files:</h5><ul>")
        $('#noChangePullModal').modal('show');
    else {
        $('#pullValidateBody').html(strN.concat("</ul>").concat(strD).concat("</ul>").concat(strS).concat("</ul>").concat(strM).concat("</ul>"));
        $('#gitPullWarningModal').modal('show');
    }
}

function src_commit(user_name, repo_name, token, old_commit_sha, val) {
    // a) Create a blob
    var sha_blob = new Array();
    var fcontent = '';
    var json_data;

    // Create a new blob for each of the files
    // and store it in sha_blob
    var index = 0;
    for (var k in window.files) {
        if (window.files.hasOwnProperty(k)) {
            fcontent = window.files[k];
            json_data = {
                "content": $('<div/>').html(fcontent).text(),
                "encoding": "utf-8"
            };

            $.ajax
            ({
                type: "POST",
                url: 'https://api.github.com/repos/' + user_name + '/' + repo_name + '/git/blobs?access_token=' + token,
                dataType: 'json',
                async: false,
                data: JSON.stringify(json_data),
                success: function (data_blob) {
                    //alert('JSON Data = ' + JSON.stringify(json_data));
                    var json_blob = $.parseJSON(JSON.stringify(data_blob, undefined, 2));
                    sha_blob[index++] = json_blob.sha;
                },
                error: function (request, status, error) {
                    alert("ERROR: " + request.responseText);
                    return;
                }
            });
        }
    }

    // b) Create a tree with the above blob
    // here we need to add all the blobs of the files created.

    var new_tree_sha = '';
    index = 0;
    var treestr = '';
    for (var k in window.files) {
        if (window.files.hasOwnProperty(k)) {
            treestr += '{ "path": "' + k + '", "mode": "100644", "type": "blob", "sha": "' + sha_blob[index++] + '"},';
        }
    }
    treestr = treestr.substr(0, treestr.length - 1);

    $.ajax
    ({
        type: "POST",
        url: 'https://api.github.com/repos/' + user_name + '/' + repo_name + '/git/trees?access_token=' + token,
        dataType: 'json',
        async: false,
        data: '{ "base_tree": "' + old_commit_sha + '", "tree": [' + treestr +
                ']}',
        success: function (data_tree) {
            var json_tree = $.parseJSON(JSON.stringify(data_tree, undefined, 2));
            new_tree_sha = json_tree.sha;
            //alert("Tree created! sha=" + new_tree_sha);
        },
        error: function (request, status, error) {
            alert("ERROR: " + request.responseText);
            return;
        }
    });

    // 3. POST a new commit with the `new_tree_sha` as the tree and `old_commit_sha` as the parent (returns `new_commit_sha`)
    val = val.replace(/\\/g, "\\\\");
    val = val.replace(/\"/g, "\\\"");

    var new_commit_sha = '';
    $.ajax
    ({
        type: "POST",
        url: 'https://api.github.com/repos/' + user_name + '/' + repo_name + '/git/commits?access_token=' + token,
        dataType: 'json',
        async: false,
        data: '{"message": "' + val + '", "author": { "name": "' + user_name + '"}, "parents": ["' + old_commit_sha + '"], "tree": "' + new_tree_sha + '"}',
        success: function (data_commit) {
            var json_commit = $.parseJSON(JSON.stringify(data_commit, undefined, 2));
            new_commit_sha = json_commit.sha;
            //alert("Committed the changes! sha=" + new_commit_sha);
        },
        error: function (request, status, error) {
            alert("ERROR: " + request.responseText);
            return;
        }
    });

    // 4. POST a new "refs/heads/master" (set it to `new_commit_sha`)
    $.ajax
    ({
        type: "PATCH",
        url: 'https://api.github.com/repos/' + user_name + '/' + repo_name + '/git/refs/heads/master?access_token=' + token,
        dataType: 'json',
        async: false,
        data: '{"sha": "' + new_commit_sha + '","force": true}',
        success: function (data_tree) {
            var json_patch = $.parseJSON(JSON.stringify(data_tree, undefined, 2));

            if (typeof json_patch.object.sha === "undefined") {
                alert("ERROR. Response from reference update was " + json_patch);
            } else {
                //alert("Reference updated! sha=" + new_tree_sha);
                //alert("The project was successfully saved to GitHub.");
                update_git_sha(json_patch.object.sha);
                //alert("how");
                setOperationOutput("The project was successfully saved to GitHub.");
            }
        },
        error: function (request, status, error) {
            alert("ERROR: " + request.responseText);
            return;
        }
    });
}

function update_git_sha(sha) {
    $.post("{{ path('AceUtilitiesBundle_setprojectgitcommitsha', {'id':project_id} ) }}", {data: sha}, function (data) {
    });
}

function revert() {
    $("#revert").addClass("btn-success");
    $("#revert_icon").addClass("icon-white");
    window.files = jsObjClone(window.savedfiles);
    editor.getSession().setValue($("<div/>").html(window.files[window.selectedFile]).text().replace(/&quot;/g, "\""));
    window.currentfiles = refreshFiles();
    setOperationOutput("Reverted to the last saved state.");
    window.setTimeout(function () {
        $("#revert").removeClass("btn-success");
        $("#revert_icon").removeClass("icon-white");
    }, 100);
}

function verification_onFail(message) {
    $("#compile_output").css('color', 'black');
    $("#editor").css("bottom", "180px");
    $("#compile_output").css("padding-top", "10px");
    $("#compile_output").css("height", "120px");
    $("#compile_output").addClass("well");
    $("#compile_output").html(message);
    $("#compile_output").css("visibility", "visible");
    editor.resize();
}


function verification_onSuccess() {
    $("#compile_output").css('color', '');
    $(".ace_gutter-cell").css("text-decoration", "").css("color", "");
    $("#editor").css("bottom", "");
    $("#compile_output").css("height", "");
    $("#compile_output").css("padding-top", "");
    $("#compile_output").css("visibility", "");
    $("#compile_output").removeClass("well");
    editor.resize();
}

var test = '';
function compile(project) {
    setOperationProgress(90);
    loadCode();
    var fname = "";
    var fcontent = "";
    var allfiles = new Array();
    for (file in window.files) {
        fname = file;
        fcontent = window.files[file];
        allfiles.push({"filename": fname,
            "content": fcontent});
    }

    var json_data = {
        "format": "binary",
        "build": $("#cb_cp_select").val(),
        "username": $("#user").val(),
        "wiselibUUID": $("#cb_cf_select").val(),
        "project": project,
        "files": allfiles
    };

    var site_url = location.origin;
    $.ajax
    ({
        type: "POST",
        url: site_url + '/compiler.php',
        dataType: 'json',
        async: true,
        data: JSON.stringify(json_data),
        success: function (result) {
            //alert(result);
            if (result.success) {
                $("#compile").addClass("btn-success");
                $("#compile_icon").addClass("icon-ok");
                setOperationOutput("<p>Compilation ok!</p>");
            } else {
                $("#compile").addClass("btn-warning");
                $("#compile_icon").addClass("icon-remove");
                setOperationOutput("Compilation failed.");
            }
            $("#compile_icon").removeClass("icon-check").addClass("icon-white");
            window.setTimeout(function () {
                $("#compile").removeClass("btn-success").removeClass("btn-warning");
                $("#compile_icon").removeClass("icon-white").removeClass("icon-remove").removeClass("icon-ok").addClass("icon-check");
            }, 500);

            if (result.success) {
                if (typeof verification_onSuccess == 'function')
                    verification_onSuccess();
                //test = $.base64Decode(result.output);
                test = result.output;
                setOperationOutput("<p>Compilation ok! <a href='javascript:downloadBinary(\"" + result.output + "\",\"" + project + "\", \"" + $("#cb_cp_select").val() + "\");'>Download binary.</a></p>");
                if ($("#cb_cp_select").val() == "shawn") {
                    //show Run configuration div
                }
            }
            else {
                if (typeof verification_onFail == 'function')
                    verification_onFail(result.message);
            }
        },
        error: function (request, status, error) {
            alert(error);
            return;
        }
    });
}

function downloadBinary(file, project, platform) {
    var site_url = location.origin;
    site_url += "/download.php?fname=" + file + "&pname=" + project + "&platform=" + platform;
    window.location = site_url;
    setOperationOutput("");
}

old_usbflash = usbflash;

usbflash = function () {
    $("#collapseSerial").height(0);
    $("#collapseSerial").removeClass("in");
    old_usbflash();

}
old_load_files = load_files;

load_files = function () {
    var pos = editor.getCursorPosition();
    loadCode();
    editor.moveCursorTo(pos.row, pos.column, true);
    return old_load_files();
}

</script>


{#Editor Scripts#}
<script type="text/javascript" charset="utf-8">
    function addCommands() {
        editor.commands.addCommand({
            name: 'saveFile',
            bindKey: {
                win: 'Ctrl-S',
                mac: 'Command-S',
                sender: 'editor|cli'
            },
            exec: function (env, args, request) {
                save();
                window.savedfiles = refreshFiles();
            }
        });

        editor.commands.addCommand({
            name: 'verifyFile',
            bindKey: {
                win: 'Ctrl-R',
                mac: 'Command-R',
                sender: 'editor|cli'
            },
            exec: function (env, args, request) {
                verify();
            }
        });

        editor.commands.addCommand({
            name: 'uploadFile',
            bindKey: {
                win: 'Ctrl-U',
                mac: 'Command-U',
                sender: 'editor|cli'
            },
            exec: function (env, args, request) {
                usbflash();
            }
        });

        editor.commands.addCommand({
            name: 'CheckWord',
            bindKey: {
                win: 'Ctrl-Space',
                mac: 'Ctrl-Space',
                sender: 'editor|cli'
            },
            exec: function (env, args, request) {
                var selection = editor.getSession().doc.getTextRange(editor.getSelectionRange());
                if (selection == "") {
                    var row = editor.getSession().getSelection().getCursor().row;
                    var column = editor.getSession().getSelection().getCursor().column
                    var string = editor.getSession().getLine(editor.getSession().getSelection().getCursor().row);
                    var first_half = string.substring(0, column).match(/\w+$/);
                    var second_half = string.substring(column, string.length).match(/^\w+/);
                    if (first_half == null) first_half = "";
                    if (second_half == null) second_half = "";
                    selection = first_half + second_half;
                }
                window.open('http://www.google.com/search?q=' + selection + '+inurl:ibr.cs.tu-bs.de/users/tbaum/wiselib/doxygen/testing/html/');
            }
        });

        editor.commands.addCommand({
            name: 'MyComments',
            bindKey: {
                win: 'Ctrl-/',
                mac: 'Command-/',
                sender: 'editor|cli'
            },
            exec: function (env, args, request) {
                editor.toggleCommentLines();
            }
        });

        editor.commands.addCommand({
            name: 'serialMonitor',
            bindKey: {
                win: 'Ctrl-Shift-M',
                mac: 'Command-Shift-M',
                sender: 'editor|cli'
            },
            exec: function (env, args, request) {
                connect();
            }
        });

        editor.commands.addCommand({
            name: 'autoFormat',
            bindKey: {
                win: 'Ctrl-Alt-[',
                mac: 'Command-Alt-[',
                sender: 'editor|cli'
            },
            exec: function (env, args, request) {
                autoFormat();
            }
        });

    }

    function autoFormat() {
        editor.getSession().setValue(js_beautify(editor.getSession().getValue(), {'indent_size': 1, 'indent_char': '\t', 'brace_style': 'expand'}))
    }

</script>

<script type="text/javascript">

function selectFile(filename) {
    loadCode(filename);
    editor.getSession().setValue($("<div/>").html(window.files[filename]).text().replace(/&quot;/g, "\""));
    window.selectedFile = filename;

    $(".filelist").css("font-weight", "");
    if ($("a:contains(" + filename + ")")[0]){
        $("a:contains(" + filename + ")")[0].setAttribute("style", "font-weight:bold;");
        $('#file_name').html(filename);
    }

}

function loadCode() {
    window.files[window.selectedFile] = $("<div/>").text(editor.getSession().getValue()).html().replace(/"/g, "&quot;");
}

function createFile() {
    setOperationProgress(90);
    var val = { filename: $("#createfield").val() };
    $.post("{{ path('AceUtilitiesBundle_createfile', {'id':project_id} ) }}", {data: JSON.stringify(val)}, function (data) {
        $("#creationModal").modal('hide');
        handleResponse(data);
    });
}
function createWiselibFolder() {
    setOperationProgress(90);
    //var val = { filename:$("#createWiselibFolderfield").val() };
    //alert("Posting id=" + $('#WiselibFolderCreationModal').data('id') + ", " + $("#createWiselibFolderfield").val() + ", " + $('#WiselibFolderCreationModal').data('fpath'));
    $.post("{{ path('AceUtilitiesBundle_createWiselibFolder') }}", {'id': $('#WiselibFolderCreationModal').data('id'), filename: $("#createWiselibFolderfield").val(), 'fpath': $('#WiselibFolderCreationModal').data('fpath'), 'folder': true}, function (data) {
        $("#WiselibFolderCreationModal").modal('hide');
        handleResponse(data);
    });
}

function createWiselibFile() {
    setOperationProgress(90);
    var fp = $('#WiselibFileCreationModal').data('fpath');
    if (fp == "") {
        fp = "root";
    }
    $.post("{{ path('AceUtilitiesBundle_createWiselibFolder') }}", {'id': $('#WiselibFileCreationModal').data('id'), filename: $("#createWiselibFilefield").val(), 'fpath': fp}, function (data) {
        $("#WiselibFileCreationModal").modal('hide');
        handleResponse(data);
    });
}

function createWiselibFileIDFL(id, filename) {
    var fp = "root";
    $.post("{{ path('AceUtilitiesBundle_createWiselibFolder') }}", {'id': id, filename: filename, 'fpath': fp}, function (data) {
        // TODO handle smoothly
        //$("#WiselibFileCreationModal").modal('hide');
        //handleResponse(data);
    });
}

function deleteWiselibFolder(){
    var fp = $('#WiselibFolderDeletionModal').data('fpath');
    if (fp == "") {
        fp = "root";
    }

    $("#deleteFolderButton").addClass("disabled");
    $("#deleteFolderButtonC").addClass("disabled");
    $("#deleteFolderButton").html("<i class='icon-spinner icon-spin icon-large'></i> Deleting ...");

    $.ajax
    ({
        cache: false,
        type: "POST",
        url: '{{ path('AceUtilitiesBundle_deleteWiselibFolder') }}',
        dataType: 'json',
        async: false,
        data: {'id': $('#WiselibFolderDeletionModal').data('id'), 'fpath': fp},
        success: function (data) {
            handleResponse(JSON.stringify(data));
        },
        error: function (request, status, error) {
            alert("ERROR: " + request.responseText);
        }
    });

    $('#WiselibFolderDeletionModal').modal('hide');

    $("#deleteFolderButton").removeClass("disabled");
    $("#deleteFolderButtonC").removeClass("disabled");
    $("#deleteFolderButton").html("<i class='btn-danger icon-white'> Delete!");
}

function deleteFileModal(filename) {
    $("#filedeleteButton").attr("href", "javascript:deleteFile('" + filename + "');");
    $("#filedeleteModal").modal('show');
}

function deleteFile(filename) {
    setOperationProgress(90);
    var val = { "filename": filename };
    $.post("{{ path('AceUtilitiesBundle_deletefile', {'id':project_id} ) }}", {data: JSON.stringify(val)}, function (data) {
        handleResponse(data);
        window.files[filename] = "";
    });
}

function changePrivacy() {
    $.post("{{ path('AceUtilitiesBundle_changeprivacy', {'id':project_id} ) }}", {data: null}, function (data) {
        handleResponse(data);
    });
}

function editDescription() {
    $("#description").replaceWith("<textarea id='description' style='resize: none; width:100%;' rows=4>" + $("#description").text() + "</textarea>");
    $("#description_change_link").text("save");
    $("#description_change_link").attr("onClick", "saveDescription()");
}

function saveDescription() {
    $.post("{{ path('AceUtilitiesBundle_setprojectdescription', {'id':project_id} ) }}", {data: $("#description").val()}, function (data) {
        $("#description").replaceWith("<p id='description'>" + $("#description").val() + "</p>");
        $("#description_change_link").removeClass("btn btn-primary");
        $("#description_change_link").text("edit");
        $("#description_change_link").attr("onClick", "editDescription()");
    });
}

function editName() {
    $("#name").replaceWith("<input type='text' id='name' value='" + $("#name").text() + "'/>");
    $("#name_change_link").text("save");
    $("#name_change_link").attr("onClick", "saveName()");
}

function saveName() {
    $.post("{{ path('AceUtilitiesBundle_setprojectname', {'id':project_id} ) }}", {data: $("#name").val()}, function (data) {
        $("#name").replaceWith("<p id='name'>" + $("#name").val() + "</p>");
        $("#name_change_link").removeClass("btn btn-primary");
        $("#name_change_link").text("edit");
        handleResponse(data);
    });
}

//Check if two js objects are equal
function jsObjEquals(obj1, obj2) {
    for (var i in obj1) {
        if (!obj2.hasOwnProperty(i)) return false;
        if (obj1[i] != obj2[i]) return false;
    }
    for (var i in obj2) {
        if (!obj1.hasOwnProperty(i)) return false;
        if (obj1[i] != obj2[i]) return false;
    }
    return true;
}

//Manual shallow js object copy - faster than .extend()
function jsObjClone(obj) {
    var objcopy = {};
    for (var i in obj) {
        if (obj.hasOwnProperty(i))
            objcopy[i] = obj[i];
    }
    return objcopy;
}

function refreshFiles() {
    loadCode();
    var filesObj = jsObjClone(window.files);
    return filesObj;
}

$(document).ready(function () {
    $("#commitModalClose").click(function () {
        return;
    });

    $("#commitValidateSubmit").click(function () {
        $('#commitValidateModal').modal('hide');
        $('#commitModal').modal('show');
    });

    $("#commitSubmit").click(function () {
        $("#commitSubmit").addClass("disabled");
        $("#commitSubmitC").addClass("disabled");
        $("#commitSubmit").html("<i class='icon-spinner icon-spin icon-large'></i> Committing...");

        save();
        var repo_name = $("#repoName").val().trim();
        var val = $('#commitMessage').val().trim();
        //$('#commitModal').modal('hide');

        if (val == "") {
            $("#commitModal").modal('show');
            return;
        }

        setOperationProgress(90);
        var oauthMethod = 'Redirect';

        // the possible values for oauthProvider are 'github', 'facebook', .... etc. All in lowercase!
        var oauthProvider = 'github';
        var user_name = '';
        var token = '';
        init_access_token();

        OAuth.popup(oauthProvider, function (error, success) {
            if (success) {

                // GET  /user
                // Get the authenticated user
                $.ajax
                ({
                    type: "GET",
                    url: 'https://api.github.com/user?access_token=' + success.access_token,
                    dataType: 'json',
                    async: false,
                    data: '',
                    success: function (data) {
                        var json = $.parseJSON(JSON.stringify(data, undefined, 2));
                        user_name = json.login;
                        token = success.access_token;
                        //alert ("The logged user is " + user_name);
                    },
                    error: function (request, status, error) {
                        alert("ERROR: " + request.responseText);
                        return;
                    }
                });

                //GET /repos/:user/:repo/git/refs/heads/master
                //Store the SHA for the latest commit (SHA-LATEST-COMMIT)
                var sha_latest_commit = '';
                var old_commit_sha = '';
                $.ajax
                ({
                    type: "GET",
                    url: 'https://api.github.com/repos/' + user_name + '/' + repo_name + '/git/refs/heads/master?access_token=' + success.access_token,
                    dataType: 'json',
                    async: false,
                    data: '',
                    success: function (data) {
                        var json = $.parseJSON(JSON.stringify(data, undefined, 2));
                        old_commit_sha = json.object.sha;
                        // doing change here to save the exact copy of the project.
                        for (var key in comp_files) {
                            switch (comp_files[key]) {
                                case "N":

                                    break;
                                case "D":
                                    // delete the file from GitHub
                                    // DELETE /repos/:owner/:repo/contents/:path
                                    //alert("Deleting " + key);
                                    $.ajax
                                    ({
                                        type: "DELETE",
                                        url: 'https://api.github.com/repos/' + user_name + '/' + repo_name + '/contents/' + key + '?access_token=' + success.access_token,
                                        dataType: 'json',
                                        async: false,
                                        data: '{ "message": "' + val + '", "sha": "' + shas[key] + '"}',
                                        success: function (data) {
                                            // alert("Repository '"+ repo_name + "' created successfully on GitHub.com!");
                                            var json = $.parseJSON(JSON.stringify(data, undefined, 2));
                                            old_commit_sha = json.commit.sha;
                                        },
                                        error: function (request, status, error) {
                                            alert("ERROR: " + request.responseText);
                                        }
                                    });
                                    break;
                                case "S":

                                    break;
                                case "M":

                                    break;
                            }
                        }

                        src_commit(user_name, repo_name, success.access_token, old_commit_sha, val);
                    },
                    error: function (request, status, error) {
                        var json_r = $.parseJSON(request.responseText);
                        if (json_r.message.toLowerCase() == "git repository is empty.") {
                            //src_commit(user_name, repo_name, success.access_token);
                            // TODO find a solution for this case!
                        } else if (json_r.message.toLowerCase().trim() == "not found") {
                            // the repo doesn't exist
                            $.ajax
                            ({
                                type: "POST",
                                url: 'https://api.github.com/user/repos?access_token=' + success.access_token,
                                dataType: 'json',
                                async: false,
                                data: '{ "name": "' + repo_name + '", "description": "This ' + repo_name + ' repo was created using Wisebender.", "auto_init": true}',
                                success: function (data) {
                                    // alert("Repository '"+ repo_name + "' created successfully on GitHub.com!");
                                    var json = $.parseJSON(JSON.stringify(data, undefined, 2));
                                    $.post("{{ path('AceUtilitiesBundle_setprojectgiturl', {'id':project_id} ) }}", {data: json.clone_url}, function (data) {
                                        $("#div_git_url").html("\<a href=\"" + json.clone_url + "\"  target=\"_blank\"\>\<pre\>" + json.clone_url + "\</pre\>\</a\>");
                                        $("#div_git_url").css('display', 'block');
                                        $("#div_git_url").css('padding-top', '15px');
                                        $("#div_git_url").css('padding-bottom', '15px');
                                        $("#div_pull_from_github").html("\<button id=\"pull_from_github\" class=\"btn\" onclick=\"show_git_pull_warning();\" title=\"Pull Changes from GitHub\"\>\<i class=\"icon-cloud-download\"\>\</i\> Pull\</button\>");
                                        $("#div_delete_from_github").html("\<button id=\"confirm_delete_from_github\" class=\"btn  btn-danger\" onclick=\"confirm_delete_from_github('{{ project_name }}');\"                                        title=\"Delete the project from GitHub\"\>\<i id=\"github_delete_icon\" class=\"icon-trash icon-white\"\>\</i\> Delete\</button\>");
                                        //$("#div_pull_from_github").css('display', 'inline');
                                        //$("#div_delete_from_github").css('display', 'inline');
                                    });
                                },
                                error: function (request, status, error) {
                                    alert("ERROR: " + request.responseText);
                                }
                            });

                            $.ajax
                            ({
                                type: "GET",
                                url: 'https://api.github.com/repos/' + user_name + '/' + repo_name + '/git/refs/heads/master?access_token=' + success.access_token,
                                dataType: 'json',
                                async: false,
                                data: '',
                                success: function (data) {
                                    var json = $.parseJSON(JSON.stringify(data, undefined, 2));
                                    old_commit_sha = json.object.sha;
                                    src_commit(user_name, repo_name, success.access_token, old_commit_sha, val);
                                },
                                error: function (request, status, error) {
                                    alert("ERROR: " + request.responseText);
                                }
                            });
                        } else {
                            alert("ERROR: " + request.responseText);
                        }
                    }
                });
            }
            else {
                //$('#result').html("// Result error <br /><br />" + error);
                alert("// Result error <br /><br />" + error);
            }
        })
        ;
        $("#commitSubmit").removeClass("disabled");
        $("#commitSubmitC").removeClass("disabled");
        $("#commitSubmit").html("<i class='icon-github icon-white'>&nbsp;&nbsp;Commit!");
        $('#commitModal').modal('hide');

    })
    ;

    {% if github_access_token is defined %}
    access_token = '{{ github_access_token }}';
    {% endif %}
})
;
</script>
